{"version":3,"sources":["components/ToDoItem.jsx","components/ToDoForm.jsx","components/ToDo.jsx","index.jsx"],"names":["ToDoItem","props","item","onCheck","onRemove","className","style","checked","onChange","id","title","date","desc","danger","onClick","e","preventDefault","DeleteOutlined","ToDoForm","onSubmit","Form","useForm","form","layout","onFinish","values","resetFields","Item","name","placeholder","minLength","htmlType","type","ToDo","useState","Date","toLocaleString","slice","replace","todos","setTodos","idCount","setIdCount","index","findIndex","todo","splice","color","length","toUpperCase","alert","map","renderTodoItems","count","i","numberOfUnChecked","Header","Layout","Footer","Content","App","span","offset","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a4f70c25.chunk.js","sourcesContent":["import {React } from 'react';\r\nimport { Button, Checkbox } from 'antd';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\n\r\nexport const ToDoItem = (props) => {\r\n  const { item, onCheck, onRemove } = props;\r\n  const onRemoveItem = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (onRemove) {\r\n      onRemove(item.id);\r\n    }\r\n  }\r\n\r\n  const onCheckItem = () => {\r\n    if (onCheck) {\r\n      onCheck(item.id);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <li className=\"todo-item\" key={item.id}>\r\n       <div className=\"todo-item-body\">\r\n           <Checkbox style={ item.checked ? {'color': 'green', 'text-decoration': 'line-through'} : {}} className=\"title\" checked={item.checked} onChange={onCheckItem}>\r\n        {item.title} \r\n    </Checkbox>\r\n    <p style={ item.checked ? {'color': 'green', 'text-decoration': 'line-through'} : {}}>{item.date}</p>\r\n    <p style={ item.checked ? {'color': 'green', 'text-decoration': 'line-through'} : {}} className=\"description\">{item.desc}</p>\r\n    </div>\r\n    <Button danger=\"true\" className=\"remove-button\" onClick={onRemoveItem}><DeleteOutlined /></Button>\r\n</li>\r\n  )\r\n}","import React from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\n\r\nexport const ToDoForm = (props) => {\r\n  const { onSubmit } = props;\r\n  const [form] = Form.useForm();\r\n  const onFinish = (values) => {\r\n    if (onSubmit) {\r\n      onSubmit(values.title, values.desc);\r\n    }\r\n    form.resetFields();\r\n  }\r\n\r\n  return (\r\n    <Form className=\"todo-form\" form={form} layout={'inline'} onFinish={onFinish}>\r\n      <Form.Item name=\"title\" className=\"todo-form-input\">\r\n        <Input placeholder={'Title'} />\r\n      </Form.Item>\r\n\r\n      <Form.Item name=\"desc\" className=\"todo-form-input\">\r\n        <Input placeholder={'Description'} minLength=\"3\"/>\r\n      </Form.Item>\r\n\r\n      <Form.Item className=\"todo-form-actions\">\r\n        <Button htmlType=\"submit\" type=\"primary\">Add</Button>\r\n      </Form.Item>\r\n    </Form>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Card, Divider, Button } from 'antd';\r\nimport { ToDoItem } from './ToDoItem';\r\nimport { ToDoForm } from './ToDoForm';\r\n\r\nexport const ToDo = () => {\r\n  const [todos, setTodos] = useState([\r\n    {id: 1, title: 'Todo 1', desc : 'Example', date: new Date().toLocaleString().slice(0,17).replace(/\\//g,'.').replace(/,/g, ' -'), checked: false},\r\n    {id: 2, title: 'Todo 2', desc : 'Another example', date: new Date().toLocaleString().slice(0,17).replace(/\\//g,'.').replace(/,/g, ' -'), checked: false}\r\n  ]);\r\n  const [idCount, setIdCount] = useState(10);\r\n\r\n  const renderTodoItems = (todos) => {\r\n    return (\r\n      <ul className=\"todo-list\">\r\n        { todos.map(todo => <ToDoItem \r\n            key={todo.id}\r\n            item={todo}\r\n            onRemove={onRemove} \r\n            onCheck={onCheck} \r\n          />) }\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  const onRemove = (id) => {\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n\r\n    if (index !== -1) {\r\n      todos.splice(index, 1);\r\n      setTodos([...todos]);\r\n    }\r\n  }\r\n\r\n  const onCheck = (id) => {\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n    \r\n    if (index !== -1) {\r\n      const todo = todos[index];\r\n\r\n      todo.color = \"teal\";\r\n      todo.checked = !todo.checked;      \r\n      todos.splice(index, 1, todo);      \r\n      \r\n      setTodos([...todos]);\r\n    }    \r\n    \r\n  }\r\n\r\n  const onSubmit = (title, desc) => {\r\n    if (title == null || desc == null || title.length < 3 || desc.length < 3 || title[0] != title[0].toUpperCase()) {\r\n      alert(\"Length of the field shouldn't be less than 3 characters. Title should start with a capital letter\");\r\n    }\r\n      else {\r\n    const todo = {\r\n      title,\r\n      desc,\r\n      id: idCount,\r\n      checked: false,\r\n      date: new Date().toLocaleString().slice(0,17).replace(/\\//g,'.').replace(/,/g, ' -')\r\n    };\r\n\r\n    setTodos([...todos, todo]);\r\n    setIdCount(idCount + 1);\r\n    }\r\n  } \r\n\r\n  const removeChecked = () => { \r\n    \r\n    let i = todos.length;\r\n    while (i--) {\r\n      if (todos[i].checked === true) {\r\n          todos.splice(i, 1);\r\n      }\r\n    }\r\n    \r\n    setTodos([...todos]);\r\n  }\r\n\r\n\r\n\r\n  const numberOfUnChecked = () => { \r\n\r\n    let count = 0;\r\n\r\n    let i = todos.length;\r\n    while (i--) {\r\n      if (todos[i].checked === false) {\r\n          count++;\r\n      }\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n\r\n  return (\r\n    <Card title={'Todo list'} className=\"todo-card\">\r\n      <ToDoForm onSubmit={onSubmit} />\r\n      <Divider />\r\n      { renderTodoItems(todos) }\r\n      <Divider />\r\n      <p>Number of Unchecked cards: <p className=\"todo-numberUnchecked\">{numberOfUnChecked()}</p></p>\r\n      <Divider />\r\n      <Button htmlType=\"submit\" type=\"primary\" onClick={removeChecked}>Remove checked cards</Button>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Layout, Row, Col } from 'antd';\r\n\r\nimport { ToDo } from './components/ToDo';\r\n\r\nimport 'antd/dist/antd.css'\r\nimport './index.css';\r\n\r\nconst { Header, Footer, Content } = Layout;\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <Layout>\r\n      <Header></Header>\r\n      <Content>\r\n        <Row>\r\n          <Col span={12} offset={6} className=\"todo\">\r\n            <ToDo />\r\n          </Col>\r\n        </Row>\r\n      </Content>\r\n      <Footer></Footer>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}